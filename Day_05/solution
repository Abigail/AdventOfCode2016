#!/opt/perl/bin/perl

use 5.010;

use strict;
use warnings;
no  warnings 'syntax';

use feature  'signatures';
no  warnings 'experimental::signatures';

#
# Part 1:
#
# You are faced with a security door designed by Easter Bunny engineers
# that seem to have acquired most of their security knowledge by
# watching hacking movies.
# 
# The eight-character password for the door is generated one character
# at a time by finding the MD5 hash of some Door ID (your puzzle
# input) and an increasing integer index (starting with 0).
# 
# A hash indicates the next character in the password if its hexadecimal
# representation starts with five zeroes. If it does, the sixth
# character in the hash is the next character of the password.
#
# Your puzzle input is ojvtpuvg.
#
#
# Part 2:
#
# As the door slides open, you are presented with a second door that
# uses a slightly more inspired security mechanism. Clearly unimpressed
# by the last version (in what movie is the password decrypted in
# order?!), the Easter Bunny engineers have worked out a better
# solution.
# 
# Instead of simply filling in the password from left to right, the
# hash now also indicates the position within the password to fill.
# You still look for hashes that begin with five zeroes; however,
# now, the sixth character represents the position (0-7), and the
# seventh character is the character to put in that position.
# 
# A hash result of 000001f means that f is the second character in
# the password. Use only the first result for each position, and
# ignore invalid positions.
#
# Given the actual Door ID and this new method, what is the password? Be
# extra proud of your solution if it uses a cinematic "decrypting" animation.
#

use Digest::MD5 qw [md5_hex];

my $PASSWORD_LENGTH = 8;

my $key       = "ojvtpuvg";
my $inc       =  0;
my $password1 = "";
my $password2 = "_" x $PASSWORD_LENGTH;

$| = 1;

print $password2, " ";

while (1) {
    my $input = $key . $inc ++;
    my $out   = md5_hex ($input);
    if ($out =~ /^00000(?<char1>.)(?<char2>.)/) {
        my $char1 = $+ {char1};
        my $char2 = $+ {char2};

        $password1 .= $char1;
        if ($char1 =~ /[0-7]/ && substr ($password2, $char1, 1) eq "_") {
            substr ($password2, $char1, 1) = $char2;
            print "\r$password2 ";
        }
        last unless $password2 =~ /_/;
    }
}
print "\n";

substr ($password1, $PASSWORD_LENGTH) = "";

say "Solution1: $password1";
say "Solution2: $password2";
