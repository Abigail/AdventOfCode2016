#!/opt/perl/bin/perl

use 5.020;

use strict;
use warnings;
no  warnings 'syntax';

use feature  'signatures';
no  warnings 'experimental::signatures';

#
# Part 1:
#
# You finally reach the top floor of this building: a garden with a
# slanted glass ceiling. Looks like there are no more stars to be
# had.
# 
# While sitting on a nearby bench amidst some tiger lilies, you manage
# to decrypt some of the files you extracted from the servers downstairs.
# 
# According to these documents, Easter Bunny HQ isn't just this
# building - it's a collection of buildings in the nearby area. They're
# all connected by a local monorail, and there's another building not
# far from here! Unfortunately, being night, the monorail is currently
# not operating.
# 
# You remotely connect to the monorail control systems and discover
# that the boot sequence expects a password. The password-checking
# logic (your puzzle input) is easy to extract, but the code it uses
# is strange: it's assembunny code designed for the new computer you
# just assembled. You'll have to execute the code and get the password.
# 
# The assembunny code you've extracted operates on four registers (a,
# b, c, and d) that start at 0 and can hold any integer. However, it
# seems to make use of only a few instructions:
# 
#     cpy x y copies x (either an integer or the value of a register)
#             into register y.
#     inc x increases the value of register x by one.
#     dec x decreases the value of register x by one.
#     jnz x y jumps to an instruction y away (positive means forward;
#             negative means backward), but only if x is not zero.
# 
# The jnz instruction moves relative to itself: an offset of -1 would
# continue at the previous instruction, while an offset of 2 would
# skip over the next instruction.
# 
# For example:
# 
#   cpy 41 a
#   inc a
#   inc a
#   dec a
#   jnz a 2
#   dec a
# 
# The above code would set register a to 41, increase its value by
# 2, decrease its value by 1, and then skip the last dec a (because
# a is not zero, so the jnz a 2 skips it), leaving register a at 42.
# When you move past the last instruction, the program halts.
# 
# After executing the assembunny code in your puzzle input, what value
# is left in register a?
# 
#
# Part 2
#
# As you head down the fire escape to the monorail, you notice it
# didn't start; register c needs to be initialized to the position
# of the ignition key.
# 
# If you instead initialize register c to be 1, what value is now
# left in register a?
#
#

@ARGV = "input" unless @ARGV;

my @instructions;

#
# Read in instructions, store them
#
while (<>) {
    chomp;
    push @instructions => [split];
}

#
# Do some peephole optimization:
#   If encountering 'inc x; dec y; jnz y -2', replace it with 'add x y',
#   where "add" adds the value of register y to register x, and then
#   sets register y to 0.
#   We also set a couple of 'nop's to not disturb other jumps.
#
for (my $i = 0; $i < @instructions; $i ++) {
    if ($i + 2 < @instructions              &&
        $instructions [$i]     [0] eq 'inc' &&
        $instructions [$i + 1] [0] eq 'dec' &&
        $instructions [$i + 2] [0] eq 'jnz' &&
        $instructions [$i + 2] [2] ==  -2   &&
        $instructions [$i + 1] [1] eq $instructions [$i + 2] [1]) {

        $instructions [$i ++] = [add => $instructions [$i]     [1],
                                        $instructions [$i + 1] [1]];
        $instructions [$i ++] = ["nop"];
        $instructions [$i]    = ["nop"];
    }
}


#
# Given an integer or register name and a set of registers, 
# return the value
#
sub val ($register_or_integer, $registers) {
    $register_or_integer =~ /[0-9]/ ?              $register_or_integer
                                    : $$registers {$register_or_integer};
}


#
# Run the program, given an initial set of register values
#
sub run (%register) {
    my $pc = 0;

    while ($pc < @instructions) {
        my ($command, @args) = @{$instructions [$pc ++]};

        if ($command eq 'cpy') {
            $register {$args [1]} = val $args [0], \%register;
        }
        elsif ($command eq 'inc') {
            $register {$args [0]} ++;
        }
        elsif ($command eq 'dec') {
            $register {$args [0]} --;
        }
        elsif ($command eq 'add') {
            $register {$args [0]} += $register {$args [1]};
            $register {$args [1]}  = 0;
        }
        elsif ($command eq 'nop') {
            1;
        }
        elsif ($command eq 'jnz') {
            $pc += val ($args [1], \%register) - 1 if val $args [0], \%register;
        }
        else {
            die "Unknown command '$command @args'";
        }
    }

    $register {a};
}


say "Solution 1: ", run (a => 0, b => 0, c => 0, d => 0);
say "Solution 2: ", run (a => 0, b => 0, c => 1, d => 0);


__END__
