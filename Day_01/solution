#!/opt/perl/bin/perl

use 5.010;

use strict;
use warnings;
no  warnings 'syntax';

use feature  'signatures';
no  warnings 'experimental::signatures';

#
# Part 1:
#
# You're airdropped near Easter Bunny Headquarters in a city somewhere.
# "Near", unfortunately, is as close as you can get - the instructions
# on the Easter Bunny Recruiting Document the Elves intercepted start
# here, and nobody had time to work them out further.
# 
# The Document indicates that you should start at the given coordinates
# (where you just landed) and face North. Then, follow the provided
# sequence: either turn left (L) or right (R) 90 degrees, then walk
# forward the given number of blocks, ending at a new intersection.
# 
# There's no time to follow such ridiculous instructions on foot,
# though, so you take a moment and work out the destination. Given
# that you can only walk on the street grid of the city, how far is
# the shortest path to the destination?
#
#
# Part 2:
#
# Then, you notice the instructions continue on the back of the
# Recruiting Document. Easter Bunny HQ is actually at the first
# location you visit twice.
# 
# For example, if your instructions are R8, R4, R4, R8, the first
# location you visit twice is 4 blocks away, due East.
#
# 
# How many blocks away is the first location you visit twice?
# 

my $input = `cat input`;

my $facing = [0, 1];
my $pos    = [0, 0];

my $solution2;

sub been_here;

sub distance {
    abs ($$pos [0]) + abs ($$pos [1]);
}

sub turn ($turn) {
    if ($turn eq 'R') {
        $facing = [ $$facing [1], -$$facing [0]];
    }
    elsif ($turn eq 'L') {
        $facing = [-$$facing [1],  $$facing [0]];
    }
}

sub walk ($distance) {
    for (1 .. $distance) {
        $$pos [0] += $$facing [0];
        $$pos [1] += $$facing [1];
        if (been_here == 2) {
            $solution2 //= distance;
        }
    }
}

sub been_here {
    state $been_here;
    ++ $$been_here {$$pos [0], $$pos [1]};
}

my $done_twice = 0;
my %seen;
while ($input =~ /(?<turn>[LR])(?<distance>[0-9]+)/g) {
    my $turn     = $+ {turn};
    my $distance = $+ {distance};
    turn $turn;
    walk $distance;
}

say "Solution 1: ", distance;
say "Solution 2: ", $solution2;

__END__
