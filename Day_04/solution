#!/opt/perl/bin/perl

use 5.010;

use strict;
use warnings;
no  warnings 'syntax';

use feature  'signatures';
no  warnings 'experimental::signatures';

#
# Part 1:
#
# Finally, you come across an information kiosk with a list of rooms.
# Of course, the list is encrypted and full of decoy data, but the
# instructions to decode the list are barely hidden nearby. Better
# remove the decoy data first.
# 
# Each room consists of an encrypted name (lowercase letters separated
# by dashes) followed by a dash, a sector ID, and a checksum in square
# brackets.
# 
# A room is real (not a decoy) if the checksum is the five most common
# letters in the encrypted name, in order, with ties broken by
# alphabetization.
#
# What is the sum of the sector IDs of the real rooms?
#
#
# Part 2:
#
# With all the decoy data out of the way, it's time to decrypt this
# list and get moving.
# 
# The room names are encrypted by a state-of-the-art shift cipher,
# which is nearly unbreakable without the right software. However,
# the information kiosk designers at Easter Bunny HQ were not expecting
# to deal with a master cryptographer like yourself.
# 
# To decrypt a room name, rotate each letter forward through the
# alphabet a number of times equal to the room's sector ID. A becomes
# B, B becomes C, Z becomes A, and so on. Dashes become spaces.
# 
# What is the sector ID of the room where North Pole objects are stored?
# 

my @input = `cat input`;

my $CHECKSUM_LENGTH = 5;
my $id_sum = 0;
my $north_pole_id;

foreach my $line (@input) {
    $line =~ /^(?<name>[-a-z]+)-
               (?<id>[0-9]+)
             \[(?<checksum>[a-z]{$CHECKSUM_LENGTH})\]/x or next;
    my $name     = $+ {name};
    my $id       = $+ {id};
    my $checksum = $+ {checksum};

    my %count;
    $count {$_} ++ for split // => $name =~ s/-//gr;

    my @char_order = sort {$count {$b} <=> $count {$a} ||
                                   $a  cmp         $b} keys %count;
    my $exp_checksum = join "" => @char_order [0 .. $CHECKSUM_LENGTH - 1];

    $id_sum += $id if $exp_checksum eq $checksum;

    #
    # Decrypt
    #
    $name =~ tr/a-z/b-za/ for 1 .. ($id % 26);
    $name =~ tr/-/ /;
    $north_pole_id = $id if $name eq 'northpole object storage';
}

say "Solution1: $id_sum";
say "Solution2: $north_pole_id";
