#!/opt/perl/bin/perl

use 5.020;

use strict;
use warnings;
no  warnings 'syntax';

use feature  'signatures';
no  warnings 'experimental::signatures';

#
# Part 1:
# 
# You arrive at Easter Bunny Headquarters under cover of darkness.
# However, you left in such a rush that you forgot to use the bathroom!
# Fancy office buildings like this one usually have keypad locks on
# their bathrooms, so you search the front desk for the code.
# 
# "In order to improve security," the document you find says, "bathroom
# codes will no longer be written down. Instead, please memorize and
# follow the procedure below to access the bathrooms."
# 
# The document goes on to explain that each button to be pressed can
# be found by starting on the previous button and moving to adjacent
# buttons on the keypad: U moves up, D moves down, L moves left, and
# R moves right. Each line of instructions corresponds to one button,
# starting at the previous button (or, for the first line, the "5"
# button); press whatever button you're on at the end of each line.
# If a move doesn't lead to a button, ignore it.
# 
# You can't hold it much longer, so you decide to figure out the code
# as you walk to the bathroom. You picture a keypad like this:
# 
#     1 2 3
#     4 5 6
#     7 8 9
#
# Your puzzle input is the instructions from the document you found
# at the front desk. What is the bathroom code?
#
# 
#
# Part 2:
#
# You finally arrive at the bathroom (it's a several minute walk from
# the lobby so visitors can behold the many fancy conference rooms
# and water coolers on this floor) and go to punch in the code. Much
# to your bladder's dismay, the keypad is not at all like you imagined
# it. Instead, you are confronted with the result of hundreds of
# man-hours of bathroom-keypad-design meetings:
# 
#         1
#       2 3 4
#     5 6 7 8 9
#       A B C
#         D
#
# Using the same instructions in your puzzle input, what is the correct
# bathroom code?
#

@ARGV     = "input" unless @ARGV;
my @input = <ARGV>;

package Pad {
    use Hash::Util::FieldHash qw [fieldhash];

    fieldhash my %pad;
    fieldhash my %x;
    fieldhash my %y;

    sub new ($class) {
        bless do {\my $var} => $class;
    }

    sub set_pad ($self, $pad) {
        my @pad      =  map {[0, split ('' => $_), 0]}
                        split /\n/ => $pad =~ s/ /0/gr;
        push @pad    => [(0) x @{$pad [0]}];
        unshift @pad => $pad [-1];
        
        $pad {$self} = \@pad;
        $self;
    }

    sub set_x_y ($self, $x, $y) {
        $x {$self} = $x + 1;
        $y {$self} = $y + 1;
        $self;
    }

    my $directions = {
        U   =>  [-1,  0],
        R   =>  [ 0,  1],
        D   =>  [ 1,  0],
        L   =>  [ 0, -1]
    };

    sub move ($self, $direction) {
        my $delta  = $$directions {$direction} or return;
        my $next_x = $x {$self} + $$delta [0];
        my $next_y = $y {$self} + $$delta [1];
        return unless $pad {$self} [$next_x] [$next_y];

        $x {$self} = $next_x;
        $y {$self} = $next_y;
        return;
    }

    sub code ($self) {
        $pad {$self} [$x {$self}] [$y {$self}];
    }
};



my $pad1_layout = << "--";
123
456
789
--

my $pad2_layout = << "--";
  1
 234
56789
 ABC
  D
--


my $pad1 = Pad:: -> new
                 -> set_pad ($pad1_layout)
                 -> set_x_y (1, 1);

my $pad2 = Pad:: -> new
                 -> set_pad ($pad2_layout)
                 -> set_x_y (2, 0);

my $code1 = "";
my $code2 = "";
foreach my $line (@input) {
    foreach my $direction (split '' => $line) {
        $pad1 -> move ($direction);
        $pad2 -> move ($direction);
    }
    $code1 .= $pad1 -> code;
    $code2 .= $pad2 -> code;
}

say "Solution1: $code1";
say "Solution2: $code2";


__END__
