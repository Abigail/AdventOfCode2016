#!/opt/perl/bin/perl

use 5.020;

use strict;
use warnings;
no  warnings 'syntax';

use feature  'signatures';
no  warnings 'experimental::signatures';

#
# Part 1:
#
# You come upon a column of four floors that have been entirely sealed
# off from the rest of the building except for a small dedicated
# lobby. There are some radiation warnings and a big sign which reads
# "Radioisotope Testing Facility".
# 
# According to the project status board, this facility is currently
# being used to experiment with Radioisotope Thermoelectric Generators
# (RTGs, or simply "generators") that are designed to be paired with
# specially-constructed microchips. Basically, an RTG is a highly
# radioactive rock that generates electricity through heat.
# 
# The experimental RTGs have poor radiation containment, so they're
# dangerously radioactive. The chips are prototypes and don't have
# normal radiation shielding, but they do have the ability to generate
# an elecromagnetic radiation shield when powered. Unfortunately,
# they can only be powered by their corresponding RTG. An RTG powering
# a microchip is still dangerous to other microchips.
# 
# In other words, if a chip is ever left in the same area as another
# RTG, and it's not connected to its own RTG, the chip will be fried.
# Therefore, it is assumed that you will follow procedure and keep
# chips connected to their corresponding RTG when they're in the same
# room, and away from other RTGs otherwise.
# 
# These microchips sound very interesting and useful to your current
# activities, and you'd like to try to retrieve them. The fourth floor
# of the facility has an assembling machine which can make a
# self-contained, shielded computer for you to take with you - that
# is, if you can bring it all of the RTGs and microchips.
# 
# Within the radiation-shielded part of the facility (in which it's
# safe to have these pre-assembly RTGs), there is an elevator that
# can move between the four floors. Its capacity rating means it can
# carry at most yourself and two RTGs or microchips in any combination.
# (They're rigged to some heavy diagnostic equipment - the assembling
# machine will detach it for you.) As a security measure, the elevator
# will only function if it contains at least one RTG or microchip.
# The elevator always stops on each floor to recharge, and this takes
# long enough that the items within it and the items on that floor
# can irradiate each other. (You can prevent this if a Microchip and
# its Generator end up on the same floor in this way, as they can be
# connected while the elevator is recharging.)
# 
# You make some notes of the locations of each component of interest
# (your puzzle input). Before you don a hazmat suit and start moving
# things around, you'd like to have an idea of what you need to do.
# 
# When you enter the containment area, you and the elevator will start
# on the first floor.
# 
# For example, suppose the isolated area has the following arrangement:
# 
#   The first floor contains a hydrogen-compatible microchip and a
#   lithium-compatible microchip.
#   The second floor contains a hydrogen generator.
#   The third floor contains a lithium generator.
#   The fourth floor contains nothing relevant.
# 
# As a diagram (F# for a Floor number, E for Elevator, H for Hydrogen,
# L for Lithium, M for Microchip, and G for Generator), the initial
# state looks like this:
# 
#   F4 .  .  .  .  .  
#   F3 .  .  .  LG .  
#   F2 .  HG .  .  .  
#   F1 E  .  HM .  LM 
# 
# Then, to get everything up to the assembling machine on the fourth
# floor, the following steps could be taken:
# 
#   Bring the Hydrogen-compatible Microchip to the second floor,
#   which is safe because it can get power from the Hydrogen
#   Generator:
# 
#   F4 .  .  .  .  .  
#   F3 .  .  .  LG .  
#   F2 E  HG HM .  .  
#   F1 .  .  .  .  LM 
# 
#   Bring both Hydrogen-related items to the third floor, which is
#   safe because the Hydrogen-compatible microchip is getting power
#   from its generator:
# 
#   F4 .  .  .  .  .  
#   F3 E  HG HM LG .  
#   F2 .  .  .  .  .  
#   F1 .  .  .  .  LM 
# 
#   Leave the Hydrogen Generator on floor three, but bring the
#   Hydrogen-compatible Microchip back down with you so you can
#   still use the elevator:
# 
#   F4 .  .  .  .  .  
#   F3 .  HG .  LG .  
#   F2 E  .  HM .  .  
#   F1 .  .  .  .  LM 
# 
#   At the first floor, grab the Lithium-compatible Microchip, which
#   is safe because Microchips don't affect each other:
# 
#   F4 .  .  .  .  .  
#   F3 .  HG .  LG .  
#   F2 .  .  .  .  .  
#   F1 E  .  HM .  LM 
# 
#   Bring both Microchips up one floor, where there is nothing to fry them:
# 
#   F4 .  .  .  .  .  
#   F3 .  HG .  LG .  
#   F2 E  .  HM .  LM 
#   F1 .  .  .  .  .  
# 
#   Bring both Microchips up again to floor three, where they can
#   be temporarily connected to their corresponding generators while
#   the elevator recharges, preventing either of them from being
#   fried:
# 
#   F4 .  .  .  .  .  
#   F3 E  HG HM LG LM 
#   F2 .  .  .  .  .  
#   F1 .  .  .  .  .  
# 
#   Bring both Microchips to the fourth floor:
# 
#   F4 E  .  HM .  LM 
#   F3 .  HG .  LG .  
#   F2 .  .  .  .  .  
#   F1 .  .  .  .  .  
# 
#   Leave the Lithium-compatible microchip on the fourth floor, but
#   bring the Hydrogen-compatible one so you can still use the
#   elevator; this is safe because although the Lithium Generator
#   is on the destination floor, you can connect Hydrogen-compatible
#   microchip to the Hydrogen Generator there:
# 
#   F4 .  .  .  .  LM 
#   F3 E  HG HM LG .  
#   F2 .  .  .  .  .  
#   F1 .  .  .  .  .  
# 
#   Bring both Generators up to the fourth floor, which is safe
#   because you can connect the Lithium-compatible Microchip to the
#   Lithium Generator upon arrival:
# 
#   F4 E  HG .  LG LM 
#   F3 .  .  HM .  .  
#   F2 .  .  .  .  .  
#   F1 .  .  .  .  .  
# 
#   Bring the Lithium Microchip with you to the third floor so you
#   can use the elevator:
# 
#   F4 .  HG .  LG .  
#   F3 E  .  HM .  LM 
#   F2 .  .  .  .  .  
#   F1 .  .  .  .  .  
# 
#   Bring both Microchips to the fourth floor:
# 
#   F4 E  HG HM LG LM 
#   F3 .  .  .  .  .  
#   F2 .  .  .  .  .  
#   F1 .  .  .  .  .  
#
# In this arrangement, it takes 11 steps to collect all of the objects
# at the fourth floor for assembly. (Each elevator stop counts as one
# step, even if nothing is added to or removed from it.)
# 
# In your situation, what is the minimum number of steps required to
# bring all of the objects to the fourth floor?
# 
# 
# Part 2
#
# You step into the cleanroom separating the lobby from the isolated
# area and put on the hazmat suit.
#
# Upon entering the isolated containment area, however, you notice
# some extra parts on the first floor that weren't listed on the
# record outside:
#
#    An elerium generator.
#    An elerium-compatible microchip.
#    A dilithium generator.
#    A dilithium-compatible microchip.
#
# These work just like the other generators and microchips. You'll
# have to get them up to assembly as well.
#
# What is the minimum number of steps required to bring all of the
# objects, including these four new ones, to the fourth floor?
#

@ARGV = "input" unless @ARGV;

my %floor_map = qw [first 0 second 1 third 2 fourth 3];
my %stuff;

package State {
    use Hash::Util::FieldHash qw [fieldhash];

    fieldhash my %stuff;
    fieldhash my %elevator;
    fieldhash my %count;

    my $GENERATOR    = "G";
    my $MICROCHIP    = "M";
    my $TARGET_FLOOR =  3;

    #
    # Return an object
    #
    sub new ($class) {
        bless \do {my $var} => $class;
    }

    #
    # Initialize an object; we take the elevator position, and
    # the number of moves as arguments.
    #
    sub init ($self, $elevator, $count) {
        $elevator {$self} = $elevator;
        $count    {$self} = $count;
    }

    #
    # Set the position of a generator
    #
    sub add_generator ($self, $type, $floor) {
        $stuff {$self} {$type} {$GENERATOR} = $floor;
        $self;
    }

    #
    # Set the position of a microchip
    #
    sub add_microchip ($self, $type, $floor) {
        $stuff {$self} {$type} {$MICROCHIP} = $floor;
        $self;
    }

    #
    # A state is save if all types are save.
    #
    sub is_save ($self) {
        my $stuff = $stuff {$self};
        foreach my $type (keys %$stuff) {
            return 0 unless $self -> _is_save_type ($type);
        }
        return 1;
    }

    #
    # Check whether a particular element is save.
    #
    sub _is_save_type ($self, $type) {
        my $stuff = $stuff {$self};
        # If the microchip is on the same floor as a generator, it's fine
        return 1 if $$stuff {$type} {$MICROCHIP} ==
                    $$stuff {$type} {$GENERATOR};

        # If a microchip isn't on the same floor as its generator, and
        # there's another generator on the floor, it's unsafe.
        foreach my $other_type (keys %$stuff) {
            next if $other_type eq $type;
            return 0 if $$stuff {$other_type} {$GENERATOR} ==
                        $$stuff {$type}       {$MICROCHIP};
        }

        # Else, it's save.
        return 1;
    }

    #
    # Clone one self. Return an object with the same state.
    #
    sub clone ($self) {
        my $clone = State:: -> new;
           $clone -> init ($elevator {$self}, $count {$self});
        foreach my $type (keys %{$stuff {$self}}) {
            my ($generator, $microchip) = @{$stuff {$self} {$type}}
                                           {$GENERATOR, $MICROCHIP};
            $clone -> add_generator ($type => $generator);
            $clone -> add_microchip ($type => $microchip);
        }
        $clone;
    }

    #
    # Return a list of possible moves
    #
    sub moves ($self) {
        my $floor = $elevator {$self};

        #
        # List of generators on this floor
        #
        my @stuff      = keys %{$stuff {$self}};
        my @generators = grep  {$stuff {$self} {$_} {$GENERATOR} == $floor}
                                        @stuff;
        my @microchips = grep  {$stuff {$self} {$_} {$MICROCHIP} == $floor}
                                        @stuff;

        #
        # Floors to move 
        #
        my @floors = grep {$_ >= 0 && $_ < 4} $floor - 1, $floor + 1;

        #
        # Possible stuff to take
        #
        my @take;

        # Any single generator.
        push @take => map {[$GENERATOR => $_]} @generators;
        # Any single microchip.
        push @take => map {[$MICROCHIP => $_]} @microchips;
        # Any two generators
        for (my $i = 0; $i < @generators; $i ++) {
            for (my $j = 0; $j < @generators; $j ++) {
                next if $i == $j;
                push @take => [$GENERATOR => $generators [$i],
                               $GENERATOR => $generators [$j]],
            }
        }
        # Any two microchips
        for (my $i = 0; $i < @microchips; $i ++) {
            for (my $j = 0; $j < @microchips; $j ++) {
                next if $i == $j;
                push @take => [$MICROCHIP => $microchips [$i],
                               $MICROCHIP => $microchips [$j]],
            }
        }
        # Any generator and microchips of the same type
        push @take => map {[$MICROCHIP => $_, $GENERATOR => $_]}
                      grep {$stuff {$self} {$_} {$GENERATOR} ==
                            $stuff {$self} {$_} {$MICROCHIP}} @microchips;

        my @moves = map {my $floor = $_;
                         map {[$floor => @$_]} @take} @floors;

        #
        # Never move 2 things down. (But is this correct in general
        # case? It works for the given input).
        #
        @moves = grep {$$_ [0] > $elevator {$self} || @$_ == 3} @moves;
    }

    #
    # Create a unique id; note that we don't have to consider all different
    # elements to be unique. We only need to consider the different positions,
    # and the position of the elevator.
    #
    sub id ($self) {
        my @types = sort {$a cmp $b} keys %{$stuff {$self}};
        my @ids   = sort {$$a [0] <=> $$b [0] ||
                          $$a [1] <=> $$b [1]}
                    map {[$stuff {$self} {$_} {$GENERATOR},
                          $stuff {$self} {$_} {$MICROCHIP}]} @types;
        
        join "-", $elevator {$self}, map {@$_} @ids;
    }

    #
    # Move some stuff to a particular floor. Return a new object
    # with the new state.
    #
    sub move ($self, $floor, @stuff) {
        my $clone = $self -> clone;
        while (@stuff) {
            my ($m_g, $type) = splice @stuff, 0, 2;
            my $method = $m_g eq $GENERATOR ? "add_generator"
                                            : "add_microchip";
            $clone -> $method ($type => $floor);
        }
        $count    {$clone} ++;
        $elevator {$clone} = $floor;

        $clone;
    }

    #
    # Return the number of moves done so far.
    #
    sub count ($self) {
        $count {$self};
    }

    #
    # Check whether we're in a finished position. If no object is on
    # a floor which isn't the target floor, we're done.
    #
    sub done ($self) {
        foreach my $type (keys %{$stuff {$self}}) {
            return 0 if $stuff {$self} {$type} {$MICROCHIP} != $TARGET_FLOOR ||
                        $stuff {$self} {$type} {$GENERATOR} != $TARGET_FLOOR;
        }
        return 1;
    }
}



my $initial_state1 = State:: -> new;
   $initial_state1 -> init (0, 0);
my $initial_state2 = State:: -> new;
   $initial_state2 -> init (0, 0);

while (<>) {
    /(\S+) floor/ or die;
    my $floor = $floor_map {$1};
    defined ($floor) or die "$1 floor";

    foreach (/(\S+) generator/g) {
        $initial_state1 -> add_generator ($_, $floor);
        $initial_state2 -> add_generator ($_, $floor);
    }
    foreach (/(\S+)-compatible microchip/g) {
        $initial_state1 -> add_microchip ($_, $floor);
        $initial_state2 -> add_microchip ($_, $floor);
    }
}

foreach my $type (qw [elerium dilithium]) {
    $initial_state2 -> add_microchip ($type => 0);
    $initial_state2 -> add_generator ($type => 0);
}


sub bfs ($from_state) {
    my %seen;
       $seen {$from_state -> id} ++;

    my @todo = ($from_state);

    while (@todo) {
        my $state = shift @todo;
        my @moves = $state -> moves;
        foreach my $move (@moves) {
            my $next = $state -> move (@$move);
            next if $seen {$next -> id} ++ || !$next -> is_save;
            if ($next -> done) {
                return $next -> count;
            }
            push @todo => $next;
        }
    }
    return;
}


say "Solution 1: ", bfs ($initial_state1);
say "Solution 2: ", bfs ($initial_state2);


__END__
