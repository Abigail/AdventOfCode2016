#!/opt/perl/bin/perl

use 5.020;

use strict;
use warnings;
no  warnings 'syntax';

use feature  'signatures';
no  warnings 'experimental::signatures';

#
# Part 1:
#
# Now that you can think clearly, you move deeper into the labyrinth
# of hallways and office furniture that makes up this part of Easter
# Bunny HQ. This must be a graphic design department; the walls are
# covered in specifications for triangles.
# 
# Or are they?
# 
# The design document gives the side lengths of each triangle it
# describes, but... 5 10 25? Some of these aren't triangles. You can't
# help but mark the impossible ones.
# 
# In a valid triangle, the sum of any two sides must be larger than
# the remaining side. For example, the "triangle" given above is
# impossible, because 5 + 10 is not larger than 25.
#
# In your puzzle input, how many of the listed triangles are possible?
# 
# 
# Part 2:
#
# Now that you've helpfully marked up their design documents, it
# occurs to you that triangles are specified in groups of three
# vertically. Each set of three numbers in a column specifies a
# triangle. Rows are unrelated.
#
# In your puzzle input, and instead reading by columns, how many of
# the listed triangles are possible?
#
#
# In your puzzle input, how many of the listed triangles are possible?
#

@ARGV     = "input" unless @ARGV;
my @input = <ARGV>;

my $EDGES_IN_TRIANGLE = 3;

my $row_possible = 0;
my $col_possible = 0;

sub is_possible (@edge_lengths) {
    my @lengths = sort {$a <=> $b} @edge_lengths;
    my $longest = pop @lengths;
    my $others  = 0;
       $others += $_ for @lengths;
    $others > $longest;
}

my @cache;
foreach my $line (@input) {
    my @edge_lengths = split ' ' => $line;

    $row_possible ++ if is_possible @edge_lengths;

    push @cache => \@edge_lengths;
    if (@cache == $EDGES_IN_TRIANGLE) {
        for my $pos (0 .. $EDGES_IN_TRIANGLE - 1) {
            $col_possible ++ if is_possible map {$$_ [$pos]} @cache;
        }
        @cache = ();
    }
}

say "Solution1: $row_possible";
say "Solution2: $col_possible";


__END__
