#!/opt/perl/bin/perl

use 5.020;

use strict;
use warnings;
no  warnings 'syntax';

use feature  'signatures';
no  warnings 'experimental::signatures';

#
# Part 1
#
# As you enter this room, you hear a loud click! Some of the tiles
# in the floor here seem to be pressure plates for traps, and the
# trap you just triggered has run out of... whatever it tried to do
# to you. You doubt you'll be so lucky next time.
# 
# Upon closer examination, the traps and safe tiles in this room seem
# to follow a pattern. The tiles are arranged into rows that are all
# the same width; you take note of the safe tiles (.) and traps (^)
# in the first row (your puzzle input).
# 
# The type of tile (trapped or safe) in each row is based on the types
# of the tiles in the same position, and to either side of that
# position, in the previous row. (If either side is off either end
# of the row, it counts as "safe" because there isn't a trap embedded
# in the wall.)
# 
# For example, suppose you know the first row (with tiles marked by
# letters) and want to determine the next row (with tiles marked by
# numbers):
# 
#     ABCDE
#     12345
# 
# The type of tile 2 is based on the types of tiles A, B, and C; the
# type of tile 5 is based on tiles D, E, and an imaginary "safe" tile.
# Let's call these three tiles from the previous row the left, center,
# and right tiles, respectively. Then, a new tile is a trap only in
# one of the following situations:
# 
#     Its left and center tiles are traps, but its right tile is not.
#     Its center and right tiles are traps, but its left tile is not.
#     Only its left tile is a trap.
#     Only its right tile is a trap.
# 
# In any other situation, the new tile is safe.
# 
# Then, starting with the row ..^^., you can determine the next row
# by applying those rules to each new tile:
# 
#   - The leftmost character on the next row considers the left
#     (nonexistent, so we assume "safe"), center (the first ., which
#     means "safe"), and right (the second ., also "safe") tiles on
#     the previous row. Because all of the trap rules require a trap
#     in at least one of the previous three tiles, the first tile on
#     this new row is also safe, ..
#   - The second character on the next row considers its left (.),
#     center (.), and right (^) tiles from the previous row. This
#     matches the fourth rule: only the right tile is a trap. Therefore,
#     the next tile in this new row is a trap, ^.
#   - The third character considers .^^, which matches the second
#     trap rule: its center and right tiles are traps, but its left
#     tile is not. Therefore, this tile is also a trap, ^.
#   - The last two characters in this new row match the first and
#     third rules, respectively, and so they are both also traps, ^.
# 
# After these steps, we now know the next row of tiles in the room:
# .^^^^. Then, we continue on to the next row, using the same rules,
# and get ^^..^. After determining two new rows, our map looks like
# this:
# 
#     ..^^.
#     .^^^^
#     ^^..^
# 
# Here's a larger example with ten tiles per row and ten rows:
# 
#     .^^.^.^^^^
#     ^^^...^..^
#     ^.^^.^.^^.
#     ..^^...^^^
#     .^^^^.^^.^
#     ^^..^.^^..
#     ^^^^..^^^.
#     ^..^^^^.^^
#     .^^^..^.^^
#     ^^.^^^..^^
# 
# In ten rows, this larger example has 38 safe tiles.
# 
# Starting with the map in your puzzle input, in a total of 40 rows
# (including the starting row), how many safe tiles are there?
# 
# 
# Part 2
# 
# How many safe tiles are there in a total of 400000 rows?
# 

@ARGV = "input" unless @ARGV;

my $solution1 =       0;
my $solution2 =       0;

my $TRAP      =       0;
my $SAFE      =       1;
my $MAX_ROWS1 =      40;
my $MAX_ROWS2 = 400_000;

my $input = <>;
chomp $input;

#
# Create first row from the input. Add a leading safe and a trailing safe
# place. In the problem space, they're non-existant, and hence safe. Adding
# them makes the calculations below easier.
#
my @row = ($SAFE,
            map ({$_ eq "^" ? $TRAP : $SAFE} split // => $input),
           $SAFE);

#
# Count the safe places of the first row. Subtract 2 because the first
# and last position don't exist in the problem space.
#
$solution1 += $_ for @row;
$solution1 -= 2;
$solution2  = $solution1;

for my $row_count (1 .. $MAX_ROWS2 - 1) {
    #
    # Make a new row of the same length as the previous.
    #
    my @new_row = (undef) x @row;

    #
    # First and last postion are fixed to be safe.
    #
    $new_row [0] = $new_row [-1] = $SAFE;

    #
    # Fill in the rest
    #
    for (my $i = 1; $i < @row - 1; $i ++) {
        #
        # The four given rules condense to a simpler one: it's a trap
        # of the left and right are different; else the place is safe.
        #
        $new_row [$i] //= ($row [$i - 1] xor $row [$i + 1]) ? $TRAP : $SAFE;
    }

    #
    # Count the number of safe places in the new row.
    #
    if ($row_count < $MAX_ROWS1) {
        $solution1 += $_ for @new_row;
        $solution1 -= 2;
    }
    $solution2 += $_ for @new_row;
    $solution2 -= 2;
    @row = @new_row;
}


say "Solution 1: ", $solution1;
say "Solution 2: ", $solution2;


__END__
