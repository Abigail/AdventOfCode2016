#!/opt/perl/bin/perl

use 5.010;

use strict;
use warnings;
no  warnings 'syntax';

use feature  'signatures';
no  warnings 'experimental::signatures';

#
# Part 1:
#
# Something is jamming your communications with Santa. Fortunately,
# your signal is only partially jammed, and protocol in situations
# like this is to switch to a simple repetition code to get the message
# through.
# 
# In this model, the same message is sent repeatedly. You've recorded
# the repeating message signal (your puzzle input), but the data seems
# quite corrupted - almost too badly to recover. Almost.
# 
# All you need to do is figure out which character is most frequent
# for each position.
#
# Given the recording in your puzzle input, what is the error-corrected
# version of the message being sent?
#
#
# Part 2:
#
# Of course, that would be the message - if you hadn't agreed to use
# a modified repetition code instead.
# 
# In this modified code, the sender instead transmits what looks like
# random data, but for each character, the character they actually
# want to send is slightly less likely than the others. Even after
# signal-jamming noise, you can look at the letter distributions in
# each column and choose the least common letter to reconstruct the
# original message.
# 
# In the above example, the least common character in the first column
# is a; in the second, d, and so on. Repeating this process for the
# remaining characters produces the original message, advent.
# 
# Given the recording in your puzzle input and this new decoding
# methodology, what is the original message that Santa is trying to
# send?
# 


my @input = `cat input`;
my @hist;

foreach my $line (@input) {
    chomp $line;
    my @letters = split // => $line;
    for (my $i = 0; $i < @letters; $i ++) {
        $hist [$i] {$letters [$i]} ++;
    }
}

my $message1 = "";
my $message2 = "";
foreach my $hist (@hist) {
    my @letters = sort {$$hist {$a} <=> $$hist {$b}} keys %$hist;
    $message1 .= $letters [-1];
    $message2 .= $letters [ 0];
}

say "Solution1: $message1";
say "Solution2: $message2";
