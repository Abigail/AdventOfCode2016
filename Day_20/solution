#!/opt/perl/bin/perl

use 5.020;

use strict;
use warnings;
no  warnings 'syntax';

use feature  'signatures';
no  warnings 'experimental::signatures';

@ARGV = "input" unless @ARGV;

my $BEGIN     =  0;
my $END       =  1;
my $MAX_IP    = (1 << 32) - 1;

my $solution1;
my $solution2 = 0;

#
# Put the ranges into an array, sort them by start address.
# It does not matter how any duplicate start addresses sort.
#
my @ranges;
while (<>) {
    /^([0-9]+)-([0-9]+)$/ or die $_;
    my ($range_begin, $range_end) = ($1, $2);
    #
    # Do some validation
    #
    next if $range_begin > $range_end;
    next if $range_begin > $MAX_IP;
    $range_end = $MAX_IP if $range_end > $MAX_IP;

    push @ranges => [$range_begin, $range_end];
}
@ranges = sort {$$a [$BEGIN] <=> $$b [$BEGIN]} @ranges;

#
# Process the ranges; keep track of the highest address seen so far
# (this is always an end of a range). If the begin address of a
# range is more than 1 higher than the highest address seen so far,
# we've detected a range of valid addresses. Part 1 wants the first
# address of the first valid range; Part 2 wants the number of all
# valid addresses -- which we can calculate from begin of the range,
# and the highest number seen so far.
#
my $seen_till = -1;
foreach my $range (@ranges) {
    if ($$range [$BEGIN] > $seen_till + 1) {
        $solution1 //= $seen_till + 1;
        $solution2  += $$range [$BEGIN] - $seen_till - 1;
    }
    if ($$range [$END] > $seen_till) {
        $seen_till = $$range [$END];
    }
}

#
# We have have not seen the highest possible IP address; if so,
# the left overs are valid as well.
#
$solution2 += $MAX_IP - $seen_till if $seen_till < $MAX_IP;

say "Solution 1: ", $solution1;
say "Solution 2: ", $solution2;

__END__
